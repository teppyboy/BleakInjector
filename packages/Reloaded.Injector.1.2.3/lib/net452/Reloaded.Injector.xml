<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Reloaded.Injector</name>
    </assembly>
    <members>
        <member name="T:Reloaded.Injector.Injector">
            <summary>
            Provides a means by which a target DLLs may be injected into an individual process.
            If the target process is running the administrator, the injector should also be
            ran as administrator.
            </summary>
        </member>
        <member name="P:Reloaded.Injector.Injector.HasExited">
            <summary>
            True when the target process to inject is no longer running, else false.
            </summary>
        </member>
        <member name="P:Reloaded.Injector.Injector.ShellCode">
            <summary>
            Provides access to the raw GetProcAddress and LoadLibrary calls.
            </summary>
        </member>
        <member name="M:Reloaded.Injector.Injector.#ctor(System.Diagnostics.Process)">
            <summary>
            Initializes the DLL Injector.
            </summary>
            <param name="process">The process to inject DLLs into.</param>
        </member>
        <member name="M:Reloaded.Injector.Injector.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Reloaded.Injector.Injector.Inject(System.String)">
            <summary>
            Injects a DLL into the target process.
            </summary>
            <param name="modulePath">The absolute path to your DLL to be injected.</param>
            <remarks>This function executes LoadLibraryW inside the remote process.</remarks>
            <exception cref="T:Reloaded.Injector.Exceptions.DllInjectorException">The target process is not running.</exception>
            <returns>The address/handle of the loaded in library inside the target process. Zero if the operation failed.</returns>
        </member>
        <member name="M:Reloaded.Injector.Injector.GetFunctionAddress(System.String,System.String)">
            <summary>
            Retrieves the address of a function in a module loaded inside the target process.
            </summary>
            <param name="module">The name or full path of the module.</param>
            <param name="functionToExecute">The function of that module to be executed.</param>
            <remarks>This function remotely executes GetProcAddress inside the given process.</remarks>
            <exception cref="T:Reloaded.Injector.Exceptions.DllInjectorException">The DLL is not loaded in the target process.</exception>
        </member>
        <member name="M:Reloaded.Injector.Injector.CallFunction``1(System.String,System.String,``0,System.Boolean)">
            <summary>
            Calls a function in a remote process using CreateRemoteThread.
            </summary>
            <typeparam name="TStruct">A structure type to pass as a parameter to the target function.</typeparam>
            <param name="module">The name or full path of the module to execute a function.</param>
            <param name="functionToExecute">The function of that module to be executed.</param>
            <param name="parameter">
                A parameter to pass onto the function. It is written into memory and a pointer to it
                is passed to the target function.
            </param>
            <param name="marshalParameter">
                Set to true to enable marshalling of the parameter being passed into the receiving application.
            </param>
            <remarks>
                Passing of only 1 parameter is supported. If you want to pass multiple parameters, pass a struct
                This function passes a pointer to your parameter to the target function.
                A parameter must be passed and the target method must expect it. This is a limitation of CreateRemoteThread.
            </remarks>
            <returns>A 32bit truncated exit code/return value. CreateRemoteThread does not support 64bit returns.</returns>
        </member>
        <member name="M:Reloaded.Injector.Injector.CallFunction(System.String,System.String,System.Int64)">
            <summary>
            Calls a function in a remote process using CreateRemoteThread.
            </summary>
            <param name="module">The name or full path of the module to execute a function.</param>
            <param name="functionToExecute">The function of that module to be executed.</param>
            <param name="parameterPtr">Raw value/pointer to parameter to pass to the target function.</param>
            <returns>A 32bit truncated exit code/return value. CreateRemoteThread does not support 64bit returns.</returns>
        </member>
        <member name="M:Reloaded.Injector.Injector.Eject(System.String)">
            <summary>
            Unloads a library with a specified path from the target process.
            </summary>
            <returns>False if the operation failed, else true.</returns>
        </member>
        <member name="M:Reloaded.Injector.Injector.GetModuleHandleFromPath(System.String)">
            <summary>
            Retrieves the handle (memory address) of where the module with a specified file path is loaded in the target process.
            </summary>
            <param name="modulePath">The absolute path of the module (including extension).</param>
            <returns>0 if the operation fails, else an address.</returns>
        </member>
        <member name="M:Reloaded.Injector.Injector.GetModuleHandleFromName(System.String)">
            <summary>
            Retrieves the handle (memory address) of where the module with a specified name is loaded in the target process.
            </summary>
            <param name="moduleName">The name of the module (including extension).</param>
            <returns>0 if the operation fails, else an address.</returns>
        </member>
        <member name="M:Reloaded.Injector.Interop.ModuleCollector.CollectModules(System.Diagnostics.Process)">
            <exception cref="T:Reloaded.Injector.Exceptions.DllInjectorException">Bytes to fill module list returned 0. The process is probably not yet initialized.</exception>
        </member>
        <member name="M:Reloaded.Injector.Safety.TryGetModules(System.Diagnostics.Process,System.Int32)">
            <summary>
            Waits for the modules to initialize in a target process.
            See remarks of EnumProcessModulesEx for details.
            </summary>
        </member>
        <member name="T:Reloaded.Injector.Shellcode">
            <summary>
            Builds the shellcode inside a target process which can be used to
            call LoadLibrary and GetProcAddress inside a remote process.
            </summary>
        </member>
        <member name="M:Reloaded.Injector.Shellcode.#ctor(System.Diagnostics.Process)">
            <summary>
            Builds the shellcode necessary to successfully call LoadLibraryW and GetProcAddress
            inside the address space of another executable.
            </summary>
            <param name="targetProcess">Process inside which to execute.</param>
        </member>
        <member name="M:Reloaded.Injector.Shellcode.Dispose">
            <inheritdoc/>
        </member>
    </members>
</doc>
